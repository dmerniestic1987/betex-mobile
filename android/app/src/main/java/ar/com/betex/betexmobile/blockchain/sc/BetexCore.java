package ar.com.betex.betexmobile.blockchain.sc;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint128;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.3.0.
 */
public class BetexCore extends Contract {
    private static final String BINARY = "0x60806040523480156200001157600080fd5b5060008054600160a060020a0319163317808255604051600160a060020a039190911691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a360018054600160a060020a031990811633908117909255600280549091169091179055662386f26fc100006003556004805460ff19166005908117909155600090819055620000b390640100000000620000d7810204565b620000d0600080600181808060036401000000006200022e810204565b506200044c565b60015460408051808201909152601281527f4e4130303031204e4f5420414c4c4f5745440000000000000000000000000000602082015290600160a060020a03163314620001c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620001845781810151838201526020016200016a565b50505050905090810190601f168015620001b25780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506001608060020a0381166000818152600660209081526040808320805460ff1990811660011790915560078352928190208054909316909255815192835290517fab56c5a6cf4742e76631055fdbd9804f4ef43211637e75aac5d76f92e54ab4db9281900390910190a150565b6000806001600860e0604051908101604052808c6001608060020a031681526020018b6001604060020a031681526020018a6001604060020a031681526020018881526020018781526020018960018111156200028757fe5b81526020018660038111156200029957fe5b9052815460018082018085556000948552602094859020845160049094020180549585015160408601516001608060020a03199097166001608060020a0390951694909417608060020a60c060020a0319167001000000000000000000000000000000006001604060020a039586160217600160c060020a0316780100000000000000000000000000000000000000000000000094909616939093029490941782556060830151828201556080830151600283015560a08301516003830180549192909160ff19169083818111156200036e57fe5b021790555060c08201518160030160016101000a81548160ff021916908360038111156200039857fe5b021790555050500390506001608060020a03811681146200044057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f4875626f20627566666572206f766572666c6f7720656e20616c74612064652060448201527f6170756573746100000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b98975050505050505050565b61315e806200045c6000396000f3fe6080604052600436106101505763ffffffff60e060020a6000350416630519ce798114610155578063061e494f1461018657806312065fe01461024257806322af00fa1461026957806326abadb214610293578063273147a91461032d5780632b3cde621461036257806335597c3e1461039557806338a59169146103da5780633e34213f146104255780634e0a33791461043a5780634eb8966f1461046d578063715018a6146104a05780637e048e3f146104b55780638a44810d146105815780638da5cb5b146105ae5780638f32d59b146105c3578063aa8985a9146105ec578063afb88a8a14610676578063b1aa2819146106a0578063d621b4f3146106ea578063d82aff1114610714578063e148919114610747578063e7ac022d14610772578063ec5ffac214610787578063f2fde38b1461079c578063fbcd4c26146107cf578063fda9d03214610814575b600080fd5b34801561016157600080fd5b5061016a61084d565b60408051600160a060020a039092168252519081900360200190f35b34801561019257600080fd5b506101b0600480360360208110156101a957600080fd5b503561085c565b60405180886001608060020a03166001608060020a03168152602001876001604060020a03166001604060020a03168152602001866001604060020a03166001604060020a0316815260200185815260200184815260200183600181111561021457fe5b60ff16815260200182600381111561022857fe5b60ff16815260200197505050505050505060405180910390f35b34801561024e57600080fd5b506102576109c6565b60408051918252519081900360200190f35b34801561027557600080fd5b506101b06004803603602081101561028c57600080fd5b5035610a8b565b34801561029f57600080fd5b506102dd600480360360608110156102b657600080fd5b506001608060020a03813516906001604060020a0360208201358116916040013516610af3565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610319578181015183820152602001610301565b505050509050019250505060405180910390f35b34801561033957600080fd5b506103606004803603602081101561035057600080fd5b50356001608060020a0316610b6b565b005b34801561036e57600080fd5b506103606004803603602081101561038557600080fd5b50356001608060020a0316610d14565b610360600480360360808110156103ab57600080fd5b506001608060020a03813516906001604060020a03602082013581169160408101359091169060600135610e02565b3480156103e657600080fd5b506102dd600480360360608110156103fd57600080fd5b5080356001608060020a03169060208101356001604060020a0316906040013560ff16611019565b34801561043157600080fd5b5061016a61108d565b34801561044657600080fd5b506103606004803603602081101561045d57600080fd5b5035600160a060020a031661109c565b34801561047957600080fd5b506103606004803603602081101561049057600080fd5b50356001608060020a03166111f7565b3480156104ac57600080fd5b506103606113d3565b3480156104c157600080fd5b50610360600480360360608110156104d857600080fd5b6001608060020a03823516916001604060020a0360208201351691810190606081016040820135602060020a81111561051057600080fd5b82018360208201111561052257600080fd5b803590602001918460208302840111602060020a8311171561054357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611457945050505050565b34801561058d57600080fd5b50610360600480360360208110156105a457600080fd5b503560ff1661166b565b3480156105ba57600080fd5b5061016a6117aa565b3480156105cf57600080fd5b506105d86117b9565b604080519115158252519081900360200190f35b3480156105f857600080fd5b506106016117ca565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561063b578181015183820152602001610623565b50505050905090810190601f1680156106685780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561068257600080fd5b506103606004803603602081101561069957600080fd5b50356117eb565b3480156106ac57600080fd5b506102dd600480360360608110156106c357600080fd5b506001608060020a03813516906001604060020a03602082013581169160400135166118b3565b3480156106f657600080fd5b506105d86004803603602081101561070d57600080fd5b50356118c4565b34801561072057600080fd5b506103606004803603602081101561073757600080fd5b5035600160a060020a0316611a28565b34801561075357600080fd5b5061075c611b83565b6040805160ff9092168252519081900360200190f35b34801561077e57600080fd5b50610257611b8c565b34801561079357600080fd5b50610257611c16565b3480156107a857600080fd5b50610360600480360360208110156107bf57600080fd5b5035600160a060020a0316611c1c565b610360600480360360808110156107e557600080fd5b506001608060020a03813516906001604060020a03602082013581169160408101359091169060600135611c74565b34801561082057600080fd5b506102576004803603604081101561083757600080fd5b506001608060020a038135169060200135611e4c565b600254600160a060020a031681565b6000806000806000806000600880549050881015156108ba576040805160e560020a62461bcd02815260206004820152600f6024820152608860020a6e456c204964206e6f2065786973746502604482015290519081900360640190fd5b6108c2612fd6565b600880548a9081106108d057fe5b60009182526020918290206040805160e081018252600490930290910180546001608060020a03811684526001604060020a03608060020a820481169585019590955260c060020a900490931690820152600180830154606083015260028301546080830152600383015491929160a084019160ff9091169081111561095257fe5b600181111561095d57fe5b81526020016003820160019054906101000a900460ff16600381111561097f57fe5b600381111561098a57fe5b9052508051602082015160608301516040840151608085015160a086015160c090960151949f939e50909c50909a509850919650945092505050565b60025460408051808201909152601281526000805160206130538339815191526020820152600091600160a060020a03163314610a845760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610a49578181015183820152602001610a31565b50505050905090810190601f168015610a765780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5050303190565b6008805482908110610a9957fe5b600091825260209091206004909102018054600182015460028301546003909301546001608060020a03831694506001604060020a03608060020a840481169460c060020a90940416929060ff8082169161010090041687565b60606000610b048585856001611e7c565b6000818152600e60209081526040918290208054835181840281018401909452808452939450919290830182828015610b5c57602002820191906000526020600020905b815481526020019060010190808311610b48575b50505050509150509392505050565b6001546040805180820190915260128152600080516020613053833981519152602082015290600160a060020a03163314610beb5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a49578181015183820152602001610a31565b506001608060020a038116600090815260066020526040902054819060ff161515610c4e576040805160e560020a62461bcd0281526020600482015260146024820152600080516020613073833981519152604482015290519081900360640190fd5b6001608060020a03811660009081526007602052604081205460ff166002811115610c7557fe5b14610cb8576040805160e560020a62461bcd02815260206004820152601a60248201526000805160206130b3833981519152604482015290519081900360640190fd5b6001608060020a038216600081815260076020908152604091829020805460ff19166001179055815192835290517fc9a1b7c103d6522ada4b64bc66e404b3409b7b3eac0bf5769f53b7199a7d342b9281900390910190a15050565b6001546040805180820190915260128152600080516020613053833981519152602082015290600160a060020a03163314610d945760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a49578181015183820152602001610a31565b506001608060020a0381166000818152600660209081526040808320805460ff1990811660011790915560078352928190208054909316909255815192835290517fab56c5a6cf4742e76631055fdbd9804f4ef43211637e75aac5d76f92e54ab4db9281900390910190a150565b600354341015610e4a576040805160e560020a62461bcd02815260206004820152601e6024820152600080516020613033833981519152604482015290519081900360640190fd5b8160646001604060020a03821611610e9a576040805160e560020a62461bcd02815260206004820152601d6024820152600080516020613113833981519152604482015290519081900360640190fd5b6001608060020a038516600090815260066020526040902054859060ff161515610efc576040805160e560020a62461bcd0281526020600482015260146024820152600080516020613073833981519152604482015290519081900360640190fd5b6001608060020a03811660009081526007602052604081205460ff166002811115610f2357fe5b14610f66576040805160e560020a62461bcd02815260206004820152601a60248201526000805160206130b3833981519152604482015290519081900360640190fd5b6000610fa26064610f9686610f8a6001604060020a038a168463ffffffff611f2316565b9063ffffffff611f8816565b9063ffffffff61201216565b9050348114611002576040805160e560020a62461bcd02815260206004820152602d60248201526000805160206130138339815191526044820152609860020a6c6e206c6f2061706f737461646f02606482015290519081900360840190fd5b611010878787876001612081565b50505050505050565b606060006110288585856121f4565b6000818152600d60209081526040918290208054835181840281018401909452808452939450919290830182828015610b5c5760200282019190600052602060002090815481526020019060010190808311610b485750505050509150509392505050565b600154600160a060020a031681565b6110a46117b9565b15156110e8576040805160e560020a62461bcd02815260206004820181905260248201526000805160206130d3833981519152604482015290519081900360640190fd5b6110f06117aa565b600160a060020a031681600160a060020a03161415606060405190810160405280602c8152602001600080516020613093833981519152815260200160a060020a6b20544845204f574e45522753028152509015156111945760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a49578181015183820152602001610a31565b5060028054600160a060020a03838116600160a060020a0319831617928390556040805192821680845293909116602083015280517fd4bc10eee427e88330e9a1c5e9e0296fe2ad950ca63745cbc4725e903580be019281900390910190a15050565b6001546040805180820190915260128152600080516020613053833981519152602082015290600160a060020a031633146112775760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a49578181015183820152602001610a31565b506001608060020a038116600090815260066020526040902054819060ff1615156112da576040805160e560020a62461bcd0281526020600482015260146024820152600080516020613073833981519152604482015290519081900360640190fd5b6001608060020a03811660009081526007602052604081205460ff16600281111561130157fe5b1480611333575060016001608060020a03821660009081526007602052604090205460ff16600281111561133157fe5b145b1515611377576040805160e560020a62461bcd02815260206004820152601a60248201526000805160206130b3833981519152604482015290519081900360640190fd5b6001608060020a038216600081815260076020908152604091829020805460ff19166002179055815192835290517f5044927dc1fdc3f12ec0114d61881fa698092ec839ca51f5232ac383967d8a599281900390910190a15050565b6113db6117b9565b151561141f576040805160e560020a62461bcd02815260206004820181905260248201526000805160206130d3833981519152604482015290519081900360640190fd5b60008054604051600160a060020a03909116906000805160206130f3833981519152908390a360008054600160a060020a0319169055565b6001546040805180820190915260128152600080516020613053833981519152602082015290600160a060020a031633146114d75760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a49578181015183820152602001610a31565b506001608060020a038316600090815260066020526040902054839060ff16151561153a576040805160e560020a62461bcd0281526020600482015260146024820152600080516020613073833981519152604482015290519081900360640190fd5b6001608060020a03811660009081526007602052604081205460ff16600281111561156157fe5b146115a4576040805160e560020a62461bcd02815260206004820152601a60248201526000805160206130b3833981519152604482015290519081900360640190fd5b6115ae848461227f565b604080516001608060020a038616815290517fd299da7a6737709fa987b31fa79a215859e29d4cc17741dbd677ab40ccae27549181900360200190a160005b825181101561161f5761161785848381518110151561160857fe5b90602001906020020151612587565b6001016115ed565b50604080516001608060020a038616815290517f3b924a1b3039a37b2ac356e957397bc6123dd83f79a3e01e0989644a724670619181900360200190a1611665846111f7565b50505050565b6002546040805180820190915260128152600080516020613053833981519152602082015290600160a060020a031633146116eb5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a49578181015183820152602001610a31565b5060008160ff16118015611703575060648160ff1611155b1515611754576040805160e560020a62461bcd0281526020600482015260156024820152605860020a74506f7263656e74616a6520696e636f72726563746f02604482015290519081900360640190fd5b6004805460ff83811660ff19831617928390556040805192821680845293909116602083015280517f60786da0900f0b64a5c72514da9f3361172fa13743880049f7b3dc18dd1e788f9281900390910190a15050565b600054600160a060020a031690565b600054600160a060020a0316331490565b604080518082019091526004815260e060020a63486f6c6102602082015290565b6001546040805180820190915260128152600080516020613053833981519152602082015290600160a060020a0316331461186b5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a49578181015183820152602001610a31565b506003805490829055604080518281526020810184905281517fe7cfb53f586494863287949e981b0ec859f5ca9baa62a879d05857aaff84c41c929181900390910190a15050565b60606000610b048585856000611e7c565b600854600090821061191f576040805160e560020a62461bcd0281526020600482015260196024820152603860020a78456c20494420696e6772657361646f206e6f2065786973746502604482015290519081900360640190fd5b611927612fd6565b600880548490811061193557fe5b60009182526020918290206040805160e081018252600490930290910180546001608060020a03811684526001604060020a03608060020a820481169585019590955260c060020a900490931690820152600180830154606083015260028301546080830152600383015491929160a084019160ff909116908111156119b757fe5b60018111156119c257fe5b81526020016003820160019054906101000a900460ff1660038111156119e457fe5b60038111156119ef57fe5b8152505090506000611a0e826000015183602001518460a001516121f4565b6000908152600c602052604090205460ff16949350505050565b611a306117b9565b1515611a74576040805160e560020a62461bcd02815260206004820181905260248201526000805160206130d3833981519152604482015290519081900360640190fd5b611a7c6117aa565b600160a060020a031681600160a060020a03161415606060405190810160405280602c8152602001600080516020613093833981519152815260200160a060020a6b20544845204f574e4552275302815250901515611b205760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a49578181015183820152602001610a31565b5060018054600160a060020a03838116600160a060020a0319831617928390556040805192821680845293909116602083015280517fc71ad862381fa76e69b756229aa5c968cf144dae36b2a338821be7d10a4cdabe9281900390910190a15050565b60045460ff1681565b60025460408051808201909152601281526000805160206130538339815191526020820152600091600160a060020a03163314611c0e5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a49578181015183820152602001610a31565b505060055490565b60035481565b611c246117b9565b1515611c68576040805160e560020a62461bcd02815260206004820181905260248201526000805160206130d3833981519152604482015290519081900360640190fd5b611c71816128cf565b50565b600354341015611cbc576040805160e560020a62461bcd02815260206004820152601e6024820152600080516020613033833981519152604482015290519081900360640190fd5b8160646001604060020a03821611611d0c576040805160e560020a62461bcd02815260206004820152601d6024820152600080516020613113833981519152604482015290519081900360640190fd5b6001608060020a038516600090815260066020526040902054859060ff161515611d6e576040805160e560020a62461bcd0281526020600482015260146024820152600080516020613073833981519152604482015290519081900360640190fd5b6001608060020a03811660009081526007602052604081205460ff166002811115611d9557fe5b14611dd8576040805160e560020a62461bcd02815260206004820152601a60248201526000805160206130b3833981519152604482015290519081900360640190fd5b348314611e36576040805160e560020a62461bcd02815260206004820152602d60248201526000805160206130138339815191526044820152609860020a6c6e206c6f2061706f737461646f02606482015290519081900360840190fd5b611e44868686866000612081565b505050505050565b600960205281600052604060002081815481101515611e6757fe5b90600052602060002001600091509150505481565b60008484848460405160200180856001608060020a03166001608060020a0316608060020a028152601001846001604060020a03166001604060020a031660c060020a028152600801836001604060020a03166001604060020a031660c060020a028152600801826001811115611eef57fe5b60ff1660f860020a028152600101945050505050604051602081830303815290604052805190602001209050949350505050565b600082821115611f7d576040805160e560020a62461bcd02815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b508082035b92915050565b6000821515611f9957506000611f82565b828202828482811515611fa857fe5b041461200b576040805160e560020a62461bcd02815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f604482015260f860020a607702606482015290519081900360840190fd5b9392505050565b600080821161206b576040805160e560020a62461bcd02815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b6000828481151561207857fe5b04949350505050565b6000808083600181111561209157fe5b141561209b575060015b60006120a988888885611e7c565b6000818152600e602052604081205491925010156120d6576120cf88888887898661298a565b9250612119565b6120e68888888789600080612dac565b925060006120f689898988611e7c565b6000908152600e6020908152604082208054600181018255908352912001849055505b336000818152600a6020908152604080832080546001818101835591855283852001889055878452600b83528184208054600160a060020a0319169095179094556001608060020a038c16835260098252822080549384018155825281209091018490556121888989876121f4565b6000818152600d60209081526040808320805460018101825590845292829020909201879055815133815290810187905281519293507f2ab34af6aa257b84ed4cb5bf49672eba19d6513229cd03aa4b4fac4bcc21744c929081900390910190a1505050505050505050565b60008084848460405160200180846001608060020a03166001608060020a0316608060020a028152601001836001604060020a03166001604060020a031660c060020a02815260080182600181111561224957fe5b60ff1660f860020a0281526001019350505050604051602081830303815290604052805190602001209050809150509392505050565b600061228d838360006121f4565b6000818152600d6020908152604091829020805483518184028101840190945280845293945060609390918301828280156122e757602002820191906000526020600020905b8154815260200190600101908083116122d3575b5050505050905060005b8151811015612568576000828281518110151561230a57fe5b906020019060200201519050600060088281548110151561232757fe5b60009182526020808320858452600b90915260408320546004909202019250600160a060020a031690806002600385810154610100900460ff169081111561236b57fe5b14156123d9576001840154845461239a91606491610f969160c060020a9091046001604060020a031690611f88565b6004549092506123bb90606490610f9690859060ff1663ffffffff611f8816565b6005549091506123d1908263ffffffff612f7916565b6005556124b9565b6001600385810154610100900460ff16908111156123f357fe5b1415612491578354600285015460009161242491606491610f96919060c060020a90046001604060020a0316611f88565b60045490915061244590606490610f9690849060ff1663ffffffff611f8816565b60055490925061245b908363ffffffff612f7916565b6005556002850154600186015461248991839161247d9163ffffffff611f2316565b9063ffffffff612f7916565b9250506124b9565b6000600385810154610100900460ff16908111156124ab57fe5b14156124b957836001015491505b80820330311015612514576040805160e560020a62461bcd02815260206004820152601c60248201527f5f7265736f6c76654261636b426574202d2053696e20666f6e646f7300000000604482015290519081900360640190fd5b604051600160a060020a0384169082840380156108fc02916000818181858888f1935050505015801561254b573d6000803e3d6000fd5b50505050600301805461ff001916610300179055506001016122f1565b50506000908152600c60205260409020805460ff191660011790555050565b6000612595838360016121f4565b6000818152600d6020908152604091829020805483518184028101840190945280845293945060609390918301828280156125ef57602002820191906000526020600020905b8154815260200190600101908083116125db575b5050505050905060005b8151811015612568576000828281518110151561261257fe5b906020019060200201519050600060088281548110151561262f57fe5b60009182526020808320858452600b90915260408320546004909202019250600160a060020a031690806002600385810154610100900460ff169081111561267357fe5b14156126e157600184015484546126a291606491610f969160c060020a9091046001604060020a031690611f88565b6004549092506126c390606490610f9690859060ff1663ffffffff611f8816565b6005549091506126d9908263ffffffff612f7916565b600555612815565b6001600385810154610100900460ff16908111156126fb57fe5b14156127c5578354600285015460009161272c91606491610f96919060c060020a90046001604060020a0316611f88565b60045490915061274d90606490610f9690849060ff1663ffffffff611f8816565b600554909250612763908363ffffffff612f7916565b600555600285015460018601546000916127aa91606491610f969161278d9163ffffffff611f2316565b8954610f8a9060c060020a90046001604060020a03166064611f23565b90506127bc828263ffffffff612f7916565b93505050612815565b6000600385810154610100900460ff16908111156127df57fe5b1415612815576001840154845461281291606491610f969190610f8a9060c060020a90046001604060020a031684611f23565b91505b612825828263ffffffff611f2316565b3031101561286d576040805160e560020a62461bcd02815260206004820152600a602482015260b060020a6953696e20666f6e646f7302604482015290519081900360640190fd5b600160a060020a0383166108fc61288a848463ffffffff611f2316565b6040518115909202916000818181858888f193505050501580156128b2573d6000803e3d6000fd5b50505050600301805461ff001916610300179055506001016125f9565b600160a060020a0381161515612941576040805160e560020a62461bcd02815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061604482015260d060020a6564647265737302606482015290519081900360840190fd5b60008054604051600160a060020a03808516939216916000805160206130f383398151915291a360008054600160a060020a031916600160a060020a0392909216919091179055565b6000818152600e6020526040812081806129a2612fd6565b60e0604051908101604052808c6001608060020a031681526020018b6001604060020a031681526020018a6001604060020a03168152602001888152602001600081526020018960018111156129f457fe5b815260200160009052905060005b845481108015612a10575082155b15612c055760008582815481101515612a2557fe5b90600052602060002001541115612bfd57600060088683815481101515612a4857fe5b9060005260206000200154815481101515612a5f57fe5b60009182526020909120600490910201905060038082810154610100900460ff1690811115612a8a57fe5b1480612aad57506002600382810154610100900460ff1690811115612aab57fe5b145b15612ad0578582815481101515612ac057fe5b6000918252602082200155612bfb565b6002810154600182015460808501516060860151929091039103811515612b205760038301805461ff0019166102001790558754889085908110612b1057fe5b6000918252602082200155612bf8565b81811415612b76576002830180548201905560038301805461ff0019166102001790558754889085908110612b5157fe5b600091825260208220015560808501805182019052600260c086015260019550612bf8565b81811115612bc85760038301805461ff0019166102001790558754889085908110612b9d57fe5b60009182526020822001556002830180548301905560808501805183019052600160c0860152612bf8565b600283810180548301905560038401805461ff0019166101001790556080860180518301905260c0860152600195505b50505b505b600101612a02565b5060088054600180820180845560009390935283517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee360049093029283018054602087015160408801516001608060020a03199092166001608060020a0390941693909317608060020a60c060020a031916608060020a6001604060020a039485160217600160c060020a031660c060020a939091169290920291909117815560608501517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee484015560808501517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee584015560a08501517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee69093018054929493869390919060ff1916868381811115612d3a57fe5b021790555060c08201518160030160016101000a81548160ff02191690836003811115612d6357fe5b021790555050500392506000612d7b8c8c8c8c611e7c565b6000908152600e602090815260408220805460018101825590835291200184905550919a9950505050505050505050565b6000806001600860e0604051908101604052808c6001608060020a031681526020018b6001604060020a031681526020018a6001604060020a03168152602001888152602001878152602001896001811115612e0457fe5b8152602001866003811115612e1557fe5b9052815460018082018085556000948552602094859020845160049094020180549585015160408601516001608060020a03199097166001608060020a0390951694909417608060020a60c060020a031916608060020a6001604060020a039586160217600160c060020a031660c060020a94909616939093029490941782556060830151828201556080830151600283015560a08301516003830180549192909160ff1916908381811115612ec757fe5b021790555060c08201518160030160016101000a81548160ff02191690836003811115612ef057fe5b021790555050500390506001608060020a0381168114612f6d576040805160e560020a62461bcd02815260206004820152602760248201527f4875626f20627566666572206f766572666c6f7720656e20616c746120646520604482015260c860020a666170756573746102606482015290519081900360840190fd5b98975050505050505050565b60008282018381101561200b576040805160e560020a62461bcd02815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6040805160e08101825260008082526020820181905291810182905260608101829052608081018290529060a08201908152602001600090529056fe4c41593a205374616b652079204f6464206e6f20636f696e636964656e20636f4e6f206c6c6567c3b32061206c612061707565737461206dc3ad6e696d6100004e4130303031204e4f5420414c4c4f5745440000000000000000000000000000456c206d65726361646f206e6f206578697374650000000000000000000000004e41303030322054484520414444524553532053484f554c44204e4f54204245456c206d65726361646f206e6f20657374c3a12061637469766f0000000000004f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65728be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e04c612063756f7461206465626520736572206d61796f72206120313030000000a165627a7a723058208e09e0be749c39ac3fdd5e9a8e4f351314e8394a09adb712c966382d575359710029";

    public static final String FUNC_CFOADDRESS = "cfoAddress";

    public static final String FUNC_GETBALANCE = "getBalance";

    public static final String FUNC_BETS = "bets";

    public static final String FUNC_SUSPENDMARKET = "suspendMarket";

    public static final String FUNC_OPENMARKET = "openMarket";

    public static final String FUNC_MARKETMANAGERADDRESS = "marketManagerAddress";

    public static final String FUNC_SETCFO = "setCFO";

    public static final String FUNC_CLOSEMARKET = "closeMarket";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_SETCOMMISSION = "setCommission";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_ISOWNER = "isOwner";

    public static final String FUNC_SETMINIMUNSTAKE = "setMinimunStake";

    public static final String FUNC_SETMARKETMANAGER = "setMarketManager";

    public static final String FUNC_COMMISSION = "commission";

    public static final String FUNC_GETGAINS = "getGains";

    public static final String FUNC_MINIMUMSTAKE = "minimumStake";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_BETSBYMARKET = "betsByMarket";

    public static final String FUNC_GETMENSAJEHOLA = "getMensajeHola";

    public static final String FUNC_GETBET = "getBet";

    public static final String FUNC_RESOLVEBETBYMARKET = "resolveBetByMarket";

    public static final String FUNC_GETPLACEDBETS = "getPlacedBets";

    public static final String FUNC_GETBACKPLACEDBETSBYODDS = "getBackPlacedBetsByOdds";

    public static final String FUNC_GETLAYPLACEDBETSBYODDS = "getLayPlacedBetsByOdds";

    public static final String FUNC_ISBETWINNER = "isBetWinner";

    public static final String FUNC_PLACEBACKBET = "placeBackBet";

    public static final String FUNC_PLACELAYBET = "placeLayBet";

    public static final Event PLACEDBET_EVENT = new Event("PlacedBet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SOLVEDBACKBETS_EVENT = new Event("SolvedBackBets", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint128>() {}));
    ;

    public static final Event SOLVEDLAYBETS_EVENT = new Event("SolvedLayBets", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint128>() {}));
    ;

    public static final Event OPENMARKET_EVENT = new Event("OpenMarket", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint128>() {}));
    ;

    public static final Event CLOSEDMARKET_EVENT = new Event("ClosedMarket", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint128>() {}));
    ;

    public static final Event SUSPENDEDMARKET_EVENT = new Event("SuspendedMarket", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint128>() {}));
    ;

    public static final Event SETTEDCOMMISION_EVENT = new Event("SettedCommision", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}));
    ;

    public static final Event SETTEDSTAKE_EVENT = new Event("SettedStake", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SETTEDCFO_EVENT = new Event("SettedCFO", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SETTEDMARKETMANAGER_EVENT = new Event("SettedMarketManager", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("4", "0x9090bAF75c678B6e4E6479E529bfFd2Ec2133d73");
    }

    @Deprecated
    protected BetexCore(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected BetexCore(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected BetexCore(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected BetexCore(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<String> cfoAddress() {
        final Function function = new Function(FUNC_CFOADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> getBalance() {
        final Function function = new Function(FUNC_GETBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> bets(BigInteger param0) {
        final Function function = new Function(FUNC_BETS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint128>() {}, new TypeReference<Uint64>() {}, new TypeReference<Uint64>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}));
        return new RemoteCall<Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> suspendMarket(BigInteger _marketIdLaursia) {
        final Function function = new Function(
                FUNC_SUSPENDMARKET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint128(_marketIdLaursia)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> openMarket(BigInteger _marketIdLaursia) {
        final Function function = new Function(
                FUNC_OPENMARKET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint128(_marketIdLaursia)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> marketManagerAddress() {
        final Function function = new Function(FUNC_MARKETMANAGERADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> setCFO(String _cfo) {
        final Function function = new Function(
                FUNC_SETCFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_cfo)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> closeMarket(BigInteger _marketIdLaursia) {
        final Function function = new Function(
                FUNC_CLOSEMARKET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint128(_marketIdLaursia)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setCommission(BigInteger _commission) {
        final Function function = new Function(
                FUNC_SETCOMMISSION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(_commission)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Boolean> isOwner() {
        final Function function = new Function(FUNC_ISOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> setMinimunStake(BigInteger _minStake) {
        final Function function = new Function(
                FUNC_SETMINIMUNSTAKE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_minStake)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setMarketManager(String _marketManager) {
        final Function function = new Function(
                FUNC_SETMARKETMANAGER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_marketManager)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> commission() {
        final Function function = new Function(FUNC_COMMISSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getGains() {
        final Function function = new Function(FUNC_GETGAINS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> minimumStake() {
        final Function function = new Function(FUNC_MINIMUMSTAKE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> betsByMarket(BigInteger param0, BigInteger param1) {
        final Function function = new Function(FUNC_BETSBYMARKET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint128(param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public List<PlacedBetEventResponse> getPlacedBetEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PLACEDBET_EVENT, transactionReceipt);
        ArrayList<PlacedBetEventResponse> responses = new ArrayList<PlacedBetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PlacedBetEventResponse typedResponse = new PlacedBetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.bettor = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.betId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PlacedBetEventResponse> placedBetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, PlacedBetEventResponse>() {
            @Override
            public PlacedBetEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PLACEDBET_EVENT, log);
                PlacedBetEventResponse typedResponse = new PlacedBetEventResponse();
                typedResponse.log = log;
                typedResponse.bettor = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.betId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<PlacedBetEventResponse> placedBetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PLACEDBET_EVENT));
        return placedBetEventFlowable(filter);
    }

    public List<SolvedBackBetsEventResponse> getSolvedBackBetsEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SOLVEDBACKBETS_EVENT, transactionReceipt);
        ArrayList<SolvedBackBetsEventResponse> responses = new ArrayList<SolvedBackBetsEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SolvedBackBetsEventResponse typedResponse = new SolvedBackBetsEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.marketId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SolvedBackBetsEventResponse> solvedBackBetsEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SolvedBackBetsEventResponse>() {
            @Override
            public SolvedBackBetsEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SOLVEDBACKBETS_EVENT, log);
                SolvedBackBetsEventResponse typedResponse = new SolvedBackBetsEventResponse();
                typedResponse.log = log;
                typedResponse.marketId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SolvedBackBetsEventResponse> solvedBackBetsEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SOLVEDBACKBETS_EVENT));
        return solvedBackBetsEventFlowable(filter);
    }

    public List<SolvedLayBetsEventResponse> getSolvedLayBetsEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SOLVEDLAYBETS_EVENT, transactionReceipt);
        ArrayList<SolvedLayBetsEventResponse> responses = new ArrayList<SolvedLayBetsEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SolvedLayBetsEventResponse typedResponse = new SolvedLayBetsEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.marketId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SolvedLayBetsEventResponse> solvedLayBetsEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SolvedLayBetsEventResponse>() {
            @Override
            public SolvedLayBetsEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SOLVEDLAYBETS_EVENT, log);
                SolvedLayBetsEventResponse typedResponse = new SolvedLayBetsEventResponse();
                typedResponse.log = log;
                typedResponse.marketId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SolvedLayBetsEventResponse> solvedLayBetsEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SOLVEDLAYBETS_EVENT));
        return solvedLayBetsEventFlowable(filter);
    }

    public List<OpenMarketEventResponse> getOpenMarketEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OPENMARKET_EVENT, transactionReceipt);
        ArrayList<OpenMarketEventResponse> responses = new ArrayList<OpenMarketEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OpenMarketEventResponse typedResponse = new OpenMarketEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.marketId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OpenMarketEventResponse> openMarketEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OpenMarketEventResponse>() {
            @Override
            public OpenMarketEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OPENMARKET_EVENT, log);
                OpenMarketEventResponse typedResponse = new OpenMarketEventResponse();
                typedResponse.log = log;
                typedResponse.marketId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OpenMarketEventResponse> openMarketEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OPENMARKET_EVENT));
        return openMarketEventFlowable(filter);
    }

    public List<ClosedMarketEventResponse> getClosedMarketEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CLOSEDMARKET_EVENT, transactionReceipt);
        ArrayList<ClosedMarketEventResponse> responses = new ArrayList<ClosedMarketEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ClosedMarketEventResponse typedResponse = new ClosedMarketEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.marketId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ClosedMarketEventResponse> closedMarketEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ClosedMarketEventResponse>() {
            @Override
            public ClosedMarketEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CLOSEDMARKET_EVENT, log);
                ClosedMarketEventResponse typedResponse = new ClosedMarketEventResponse();
                typedResponse.log = log;
                typedResponse.marketId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ClosedMarketEventResponse> closedMarketEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CLOSEDMARKET_EVENT));
        return closedMarketEventFlowable(filter);
    }

    public List<SuspendedMarketEventResponse> getSuspendedMarketEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUSPENDEDMARKET_EVENT, transactionReceipt);
        ArrayList<SuspendedMarketEventResponse> responses = new ArrayList<SuspendedMarketEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuspendedMarketEventResponse typedResponse = new SuspendedMarketEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.marketId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SuspendedMarketEventResponse> suspendedMarketEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SuspendedMarketEventResponse>() {
            @Override
            public SuspendedMarketEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUSPENDEDMARKET_EVENT, log);
                SuspendedMarketEventResponse typedResponse = new SuspendedMarketEventResponse();
                typedResponse.log = log;
                typedResponse.marketId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SuspendedMarketEventResponse> suspendedMarketEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUSPENDEDMARKET_EVENT));
        return suspendedMarketEventFlowable(filter);
    }

    public List<SettedCommisionEventResponse> getSettedCommisionEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETTEDCOMMISION_EVENT, transactionReceipt);
        ArrayList<SettedCommisionEventResponse> responses = new ArrayList<SettedCommisionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SettedCommisionEventResponse typedResponse = new SettedCommisionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oldComission = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newComission = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SettedCommisionEventResponse> settedCommisionEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SettedCommisionEventResponse>() {
            @Override
            public SettedCommisionEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETTEDCOMMISION_EVENT, log);
                SettedCommisionEventResponse typedResponse = new SettedCommisionEventResponse();
                typedResponse.log = log;
                typedResponse.oldComission = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newComission = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SettedCommisionEventResponse> settedCommisionEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETTEDCOMMISION_EVENT));
        return settedCommisionEventFlowable(filter);
    }

    public List<SettedStakeEventResponse> getSettedStakeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETTEDSTAKE_EVENT, transactionReceipt);
        ArrayList<SettedStakeEventResponse> responses = new ArrayList<SettedStakeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SettedStakeEventResponse typedResponse = new SettedStakeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oldMinStake = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newMinStake = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SettedStakeEventResponse> settedStakeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SettedStakeEventResponse>() {
            @Override
            public SettedStakeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETTEDSTAKE_EVENT, log);
                SettedStakeEventResponse typedResponse = new SettedStakeEventResponse();
                typedResponse.log = log;
                typedResponse.oldMinStake = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newMinStake = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SettedStakeEventResponse> settedStakeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETTEDSTAKE_EVENT));
        return settedStakeEventFlowable(filter);
    }

    public List<SettedCFOEventResponse> getSettedCFOEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETTEDCFO_EVENT, transactionReceipt);
        ArrayList<SettedCFOEventResponse> responses = new ArrayList<SettedCFOEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SettedCFOEventResponse typedResponse = new SettedCFOEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oldAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SettedCFOEventResponse> settedCFOEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SettedCFOEventResponse>() {
            @Override
            public SettedCFOEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETTEDCFO_EVENT, log);
                SettedCFOEventResponse typedResponse = new SettedCFOEventResponse();
                typedResponse.log = log;
                typedResponse.oldAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SettedCFOEventResponse> settedCFOEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETTEDCFO_EVENT));
        return settedCFOEventFlowable(filter);
    }

    public List<SettedMarketManagerEventResponse> getSettedMarketManagerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETTEDMARKETMANAGER_EVENT, transactionReceipt);
        ArrayList<SettedMarketManagerEventResponse> responses = new ArrayList<SettedMarketManagerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SettedMarketManagerEventResponse typedResponse = new SettedMarketManagerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oldAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SettedMarketManagerEventResponse> settedMarketManagerEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SettedMarketManagerEventResponse>() {
            @Override
            public SettedMarketManagerEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETTEDMARKETMANAGER_EVENT, log);
                SettedMarketManagerEventResponse typedResponse = new SettedMarketManagerEventResponse();
                typedResponse.log = log;
                typedResponse.oldAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SettedMarketManagerEventResponse> settedMarketManagerEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETTEDMARKETMANAGER_EVENT));
        return settedMarketManagerEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public RemoteCall<String> getMensajeHola() {
        final Function function = new Function(FUNC_GETMENSAJEHOLA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> getBet(BigInteger _betId) {
        final Function function = new Function(FUNC_GETBET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_betId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint128>() {}, new TypeReference<Uint64>() {}, new TypeReference<Uint64>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}));
        return new RemoteCall<Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> resolveBetByMarket(BigInteger _marketId, BigInteger _winnerRunner, List<BigInteger> _losserRunners) {
        final Function function = new Function(
                FUNC_RESOLVEBETBYMARKET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint128(_marketId), 
                new org.web3j.abi.datatypes.generated.Uint64(_winnerRunner), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint64>(
                        org.web3j.abi.datatypes.generated.Uint64.class,
                        org.web3j.abi.Utils.typeMap(_losserRunners, org.web3j.abi.datatypes.generated.Uint64.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List> getPlacedBets(BigInteger _marketId, BigInteger _runnerId, BigInteger _betType) {
        final Function function = new Function(FUNC_GETPLACEDBETS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint128(_marketId), 
                new org.web3j.abi.datatypes.generated.Uint64(_runnerId), 
                new org.web3j.abi.datatypes.generated.Uint8(_betType)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<List> getBackPlacedBetsByOdds(BigInteger _marketId, BigInteger _runnerId, BigInteger _odd) {
        final Function function = new Function(FUNC_GETBACKPLACEDBETSBYODDS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint128(_marketId), 
                new org.web3j.abi.datatypes.generated.Uint64(_runnerId), 
                new org.web3j.abi.datatypes.generated.Uint64(_odd)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<List> getLayPlacedBetsByOdds(BigInteger _marketId, BigInteger _runnerId, BigInteger _odd) {
        final Function function = new Function(FUNC_GETLAYPLACEDBETSBYODDS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint128(_marketId), 
                new org.web3j.abi.datatypes.generated.Uint64(_runnerId), 
                new org.web3j.abi.datatypes.generated.Uint64(_odd)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<Boolean> isBetWinner(BigInteger _betId) {
        final Function function = new Function(FUNC_ISBETWINNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_betId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> placeBackBet(BigInteger _marketId, BigInteger _runnerId, BigInteger _odd, BigInteger _stake, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_PLACEBACKBET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint128(_marketId), 
                new org.web3j.abi.datatypes.generated.Uint64(_runnerId), 
                new org.web3j.abi.datatypes.generated.Uint64(_odd), 
                new org.web3j.abi.datatypes.generated.Uint256(_stake)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> placeLayBet(BigInteger _marketId, BigInteger _runnerId, BigInteger _odd, BigInteger _stake, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_PLACELAYBET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint128(_marketId), 
                new org.web3j.abi.datatypes.generated.Uint64(_runnerId), 
                new org.web3j.abi.datatypes.generated.Uint64(_odd), 
                new org.web3j.abi.datatypes.generated.Uint256(_stake)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    @Deprecated
    public static BetexCore load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new BetexCore(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static BetexCore load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new BetexCore(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static BetexCore load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new BetexCore(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static BetexCore load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new BetexCore(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<BetexCore> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(BetexCore.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<BetexCore> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(BetexCore.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<BetexCore> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(BetexCore.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<BetexCore> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(BetexCore.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class PlacedBetEventResponse {
        public Log log;

        public String bettor;

        public BigInteger betId;
    }

    public static class SolvedBackBetsEventResponse {
        public Log log;

        public BigInteger marketId;
    }

    public static class SolvedLayBetsEventResponse {
        public Log log;

        public BigInteger marketId;
    }

    public static class OpenMarketEventResponse {
        public Log log;

        public BigInteger marketId;
    }

    public static class ClosedMarketEventResponse {
        public Log log;

        public BigInteger marketId;
    }

    public static class SuspendedMarketEventResponse {
        public Log log;

        public BigInteger marketId;
    }

    public static class SettedCommisionEventResponse {
        public Log log;

        public BigInteger oldComission;

        public BigInteger newComission;
    }

    public static class SettedStakeEventResponse {
        public Log log;

        public BigInteger oldMinStake;

        public BigInteger newMinStake;
    }

    public static class SettedCFOEventResponse {
        public Log log;

        public String oldAddress;

        public String newAddress;
    }

    public static class SettedMarketManagerEventResponse {
        public Log log;

        public String oldAddress;

        public String newAddress;
    }

    public static class OwnershipTransferredEventResponse {
        public Log log;

        public String previousOwner;

        public String newOwner;
    }
}
